{
    "name": "narwhal/mime",
    "markup": "markdown",
    "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
    "lineNo": 1,
    "params": [],
    "errors": [],
    "throws": [],
    "see": [],
    "module": true,
    "doc": "This module provides basic functions for handling mime-types. It can\nhandle matching mime-types against a list of media-ranges. See section\n14.1 of the HTTP specification [RFC 2616] for a complete explanation.\n\n  <http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.1>\n\nA port to JavaScript of Joe Gregorio's MIME-Type Parser:\n\n  <http://code.google.com/p/mimeparse/>\n\nPorted by J. Chris Anderson <jchris@apache.org>, targeting the Spidermonkey runtime.\n\nTo run the tests, open mimeparse-js-test.html in a browser.\nPorted from version 0.1.2.\nComments are mostly excerpted from the original.",
    "type": "module",
    "id": "narwhal/mime",
    "children": [
        {
            "name": "parseMimeType",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 28,
            "params": [
                {
                    "name": "mimeType",
                    "type": "String"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "[type, subtype, params]",
                "doc": ""
            },
            "doc": "Carves up a mime-type and returns an Array of the\n[type, subtype, params] where \"params\" is a Hash of all\nthe parameters for the media range.\n\nFor example, the media range \"application/xhtml;q=0.5\" would\nget parsed into:\n\n    [\"application\", \"xhtml\", { \"q\" : \"0.5\" }]",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---parse-mime-type"
        },
        {
            "name": "fitnessAndQualityParsed",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 87,
            "params": [
                {
                    "name": "mimeType",
                    "type": "String",
                    "doc": "as from an HTTP Content-Type header."
                },
                {
                    "name": "parsedRanges",
                    "type": "Array",
                    "doc": "as from an HTTP Accept header and processed with `parseMediaRange`."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Find the best match for a given mime-type against\na list of media_ranges that have already been\nparsed by parseMediaRange(). Returns an array of\nthe fitness value and the value of the 'q' quality\nparameter of the best match, or (-1, 0) if no match\nwas found. Just as for qualityParsed(), 'parsed_ranges'\nmust be a list of parsed media ranges.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---fitness-and-quality-parsed"
        },
        {
            "name": "qualityParsed",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 130,
            "params": [
                {
                    "name": "mimeType",
                    "type": "String"
                },
                {
                    "name": "parsedRanges",
                    "type": "Array"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Find the best match for a given mime-type against\na list of media_ranges that have already been\nparsed by parseMediaRange(). Returns the\n'q' quality parameter of the best match, 0 if no\nmatch was found. This function bahaves the same as quality()\nexcept that 'parsedRanges' must be a list of\nparsed media ranges.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---quality-parsed"
        },
        {
            "name": "quality",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 146,
            "params": [
                {
                    "name": "mimeType",
                    "type": "String",
                    "doc": "as from an HTTP Content-Type header"
                },
                {
                    "name": "ranges",
                    "type": "String",
                    "doc": "as from an HTTP Accept header"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Returns the quality 'q' of a mime-type when compared\nagainst the media-ranges in ranges. For example::\n\n    js> MIME.quality('text/html','text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, *\\/*;q=0.5')\n    0.7",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---quality"
        },
        {
            "name": "bestMatch",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 161,
            "params": [
                {
                    "name": "MIME",
                    "type": "Array * String",
                    "doc": "types"
                },
                {
                    "name": "an",
                    "type": "String",
                    "doc": "HTTP Accept header"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Takes a list of supported mime-types and finds the best\nmatch for all the media-ranges listed in header. The value of\nheader must be a string that conforms to the format of the\nHTTP Accept: header. The value of 'supported' is a list of\nmime-types::\n\n    js> MIME.bestMatch(['application/xbel+xml', 'text/xml'], 'text/*;q=0.5,*\\/*; q=0.1')\n    \"text/xml\"",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---best-match"
        }
    ],
    "index": {
        "parseMimeType": {
            "name": "parseMimeType",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 28,
            "params": [
                {
                    "name": "mimeType",
                    "type": "String"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "[type, subtype, params]",
                "doc": ""
            },
            "doc": "Carves up a mime-type and returns an Array of the\n[type, subtype, params] where \"params\" is a Hash of all\nthe parameters for the media range.\n\nFor example, the media range \"application/xhtml;q=0.5\" would\nget parsed into:\n\n    [\"application\", \"xhtml\", { \"q\" : \"0.5\" }]",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---parse-mime-type"
        },
        "fitnessAndQualityParsed": {
            "name": "fitnessAndQualityParsed",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 87,
            "params": [
                {
                    "name": "mimeType",
                    "type": "String",
                    "doc": "as from an HTTP Content-Type header."
                },
                {
                    "name": "parsedRanges",
                    "type": "Array",
                    "doc": "as from an HTTP Accept header and processed with `parseMediaRange`."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Find the best match for a given mime-type against\na list of media_ranges that have already been\nparsed by parseMediaRange(). Returns an array of\nthe fitness value and the value of the 'q' quality\nparameter of the best match, or (-1, 0) if no match\nwas found. Just as for qualityParsed(), 'parsed_ranges'\nmust be a list of parsed media ranges.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---fitness-and-quality-parsed"
        },
        "qualityParsed": {
            "name": "qualityParsed",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 130,
            "params": [
                {
                    "name": "mimeType",
                    "type": "String"
                },
                {
                    "name": "parsedRanges",
                    "type": "Array"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Find the best match for a given mime-type against\na list of media_ranges that have already been\nparsed by parseMediaRange(). Returns the\n'q' quality parameter of the best match, 0 if no\nmatch was found. This function bahaves the same as quality()\nexcept that 'parsedRanges' must be a list of\nparsed media ranges.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---quality-parsed"
        },
        "quality": {
            "name": "quality",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 146,
            "params": [
                {
                    "name": "mimeType",
                    "type": "String",
                    "doc": "as from an HTTP Content-Type header"
                },
                {
                    "name": "ranges",
                    "type": "String",
                    "doc": "as from an HTTP Accept header"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Returns the quality 'q' of a mime-type when compared\nagainst the media-ranges in ranges. For example::\n\n    js> MIME.quality('text/html','text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, *\\/*;q=0.5')\n    0.7",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---quality"
        },
        "bestMatch": {
            "name": "bestMatch",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/mime.js",
            "lineNo": 161,
            "params": [
                {
                    "name": "MIME",
                    "type": "Array * String",
                    "doc": "types"
                },
                {
                    "name": "an",
                    "type": "String",
                    "doc": "HTTP Accept header"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Takes a list of supported mime-types and finds the best\nmatch for all the media-ranges listed in header. The value of\nheader must be a string that conforms to the format of the\nHTTP Accept: header. The value of 'supported' is a list of\nmime-types::\n\n    js> MIME.bestMatch(['application/xbel+xml', 'text/xml'], 'text/*;q=0.5,*\\/*; q=0.1')\n    \"text/xml\"",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-mime"
            ],
            "href": "packages---narwhal-lib---narwhal-mime---best-match"
        }
    },
    "heritage": [
        "packages",
        "narwhal-lib"
    ],
    "href": "packages---narwhal-lib---narwhal-mime"
}