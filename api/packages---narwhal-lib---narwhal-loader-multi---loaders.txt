{
    "name": "loaders",
    "markup": "markdown",
    "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
    "lineNo": 57,
    "params": [],
    "errors": [
        "Did not recognize \"readonly\" tag."
    ],
    "throws": [],
    "see": [],
    "doc": "May be modified in-place but not replaced.",
    "children": [
        {
            "name": "resolve",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 66,
            "params": [
                {
                    "name": "id",
                    "type": "String",
                    "doc": "a relative or top-level identifier."
                },
                {
                    "name": "baseId",
                    "type": "String",
                    "doc": "a top-level identifier."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "String",
                "doc": "the corresponding top-level identifier."
            },
            "doc": "Resolves module identifiers into the top-level,\nor absolute module name space.\n\nAn alias to `resolve` as exported by the `loader`\nmodule.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---resolve"
        },
        {
            "name": "resolvePkg",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 81,
            "params": [
                {
                    "name": "id",
                    "type": "String",
                    "doc": "a relative or top-level identifier."
                },
                {
                    "name": "baseId",
                    "type": "String",
                    "doc": "a top-level identifier."
                },
                {
                    "name": "pkg",
                    "type": "String",
                    "doc": "a package reference, scoped to the current package."
                },
                {
                    "name": "basePkg",
                    "type": "String",
                    "doc": "a package reference"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "[id: String, pkg: String]",
                "doc": "the corresponding top-level identifier and package identifier."
            },
            "doc": "Resolves a module identifier and package pair.\n\nForwards to the `resolvePkg` method of the `loader`\nmodule.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---resolve-pkg"
        },
        {
            "name": "find",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 101,
            "params": [
                {
                    "name": "topId",
                    "type": "String"
                }
            ],
            "errors": [],
            "throws": [
                {
                    "type": "Error",
                    "doc": "of no module can be found with the given top-level identifier."
                }
            ],
            "see": [],
            "returns": {
                "type": "Function(lexicalScope Object)",
                "doc": "factory a module factory (\"maker\") function."
            },
            "doc": "",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---find"
        },
        {
            "name": "load",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 134,
            "params": [
                {
                    "name": "topId",
                    "type": "String"
                },
                {
                    "name": "path",
                    "type": "String",
                    "doc": "an optional path to provide a hint about where to find the text corresponding to the given topId, provided merely to avoid recomputation."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "Function(scope: Object)",
                "doc": "the memoized module factory function corresponding to the given top-level identifier."
            },
            "doc": "",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---load"
        },
        {
            "name": "reload",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 157,
            "params": [
                {
                    "name": "path",
                    "type": "String",
                    "doc": "an optional path to provide a hint about where to find the text corresponding to the given topId, provided merely to avoid recomputation."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Forces a module to be reloaded, if possible, setting\nor replacing the module factory function in the\nmodule factory memo.  This function is called by\n`load` internally to populate the memo and may be\ncalled externally to freshen the memo.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---reload"
        },
        {
            "name": "isLoaded",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 177,
            "params": [],
            "errors": [
                "Could not recognize `@param` \"\""
            ],
            "throws": [],
            "see": [],
            "returns": {
                "type": "Boolean",
                "doc": "whether a module factory function has already been loaded for the given identifier."
            },
            "doc": "",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---is-loaded"
        }
    ],
    "index": {
        "resolve": {
            "name": "resolve",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 66,
            "params": [
                {
                    "name": "id",
                    "type": "String",
                    "doc": "a relative or top-level identifier."
                },
                {
                    "name": "baseId",
                    "type": "String",
                    "doc": "a top-level identifier."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "String",
                "doc": "the corresponding top-level identifier."
            },
            "doc": "Resolves module identifiers into the top-level,\nor absolute module name space.\n\nAn alias to `resolve` as exported by the `loader`\nmodule.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---resolve"
        },
        "resolvePkg": {
            "name": "resolvePkg",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 81,
            "params": [
                {
                    "name": "id",
                    "type": "String",
                    "doc": "a relative or top-level identifier."
                },
                {
                    "name": "baseId",
                    "type": "String",
                    "doc": "a top-level identifier."
                },
                {
                    "name": "pkg",
                    "type": "String",
                    "doc": "a package reference, scoped to the current package."
                },
                {
                    "name": "basePkg",
                    "type": "String",
                    "doc": "a package reference"
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "[id: String, pkg: String]",
                "doc": "the corresponding top-level identifier and package identifier."
            },
            "doc": "Resolves a module identifier and package pair.\n\nForwards to the `resolvePkg` method of the `loader`\nmodule.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---resolve-pkg"
        },
        "find": {
            "name": "find",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 101,
            "params": [
                {
                    "name": "topId",
                    "type": "String"
                }
            ],
            "errors": [],
            "throws": [
                {
                    "type": "Error",
                    "doc": "of no module can be found with the given top-level identifier."
                }
            ],
            "see": [],
            "returns": {
                "type": "Function(lexicalScope Object)",
                "doc": "factory a module factory (\"maker\") function."
            },
            "doc": "",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---find"
        },
        "load": {
            "name": "load",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 134,
            "params": [
                {
                    "name": "topId",
                    "type": "String"
                },
                {
                    "name": "path",
                    "type": "String",
                    "doc": "an optional path to provide a hint about where to find the text corresponding to the given topId, provided merely to avoid recomputation."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "returns": {
                "type": "Function(scope: Object)",
                "doc": "the memoized module factory function corresponding to the given top-level identifier."
            },
            "doc": "",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---load"
        },
        "reload": {
            "name": "reload",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 157,
            "params": [
                {
                    "name": "path",
                    "type": "String",
                    "doc": "an optional path to provide a hint about where to find the text corresponding to the given topId, provided merely to avoid recomputation."
                }
            ],
            "errors": [],
            "throws": [],
            "see": [],
            "doc": "Forces a module to be reloaded, if possible, setting\nor replacing the module factory function in the\nmodule factory memo.  This function is called by\n`load` internally to populate the memo and may be\ncalled externally to freshen the memo.",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---reload"
        },
        "isLoaded": {
            "name": "isLoaded",
            "markup": "markdown",
            "fileName": "/Users/kris/narwhal+node/packages/narwhal-lib/lib/narwhal/loader/multi.js",
            "lineNo": 177,
            "params": [],
            "errors": [
                "Could not recognize `@param` \"\""
            ],
            "throws": [],
            "see": [],
            "returns": {
                "type": "Boolean",
                "doc": "whether a module factory function has already been loaded for the given identifier."
            },
            "doc": "",
            "heritage": [
                "packages",
                "narwhal-lib",
                "narwhal-loader-multi",
                "loaders"
            ],
            "href": "packages---narwhal-lib---narwhal-loader-multi---loaders---is-loaded"
        }
    },
    "heritage": [
        "packages",
        "narwhal-lib",
        "narwhal-loader-multi"
    ],
    "href": "packages---narwhal-lib---narwhal-loader-multi---loaders"
}