{
    "name": "openRaw",
    "markup": "markdown",
    "fileName": "/Users/kris/narwhal+node/packages/narwhal-node/lib/fs-base.js",
    "lineNo": 239,
    "params": [
        {
            "name": "path",
            "type": "String"
        },
        {
            "name": "mode",
            "type": "Object",
            "doc": "optional"
        },
        {
            "name": "permissions",
            "type": "Permissions || Object",
            "doc": "optional"
        }
    ],
    "errors": [],
    "throws": [],
    "see": [],
    "returns": {
        "doc": "a raw byte stream"
    },
    "doc": "Open a file for reading.\n\nThe following combinations of true `read`, `write`, `update` *\nand `append` properties are supported:\n\n* `read`: read only\n* `write`: write only, truncates, creates if necessary\n* `append`: write only, append, creates if necessary\n* `read` and `update`: read and write, does not create, does not\n  truncate\n* `write` and `update`: read and write, trancates, creates if\n  necessary\n* `append` and `update`: read and write, does not truncate,\n  creates if necessary\n\nOn some varieties of UNIX, \"append\" causes all writes to be\nappended, regardless of the seek position.\n\nThe following additional properties can be set on the\noptions and are used when the underlying system supports\nthem:\n\n* `exclusive`: prevents the file from being opened if it\n  a file already exists. Atomicity of the `exclusive` open\n  can be used to coordinate processes like daemons.\n* `truncate`: explicitly requests truncation of the file\n  upon successful open.\n* `create`: explicitly requests creation if the file\n  does not exist.\n\nThe following properties can also be specified but are\nnot mentioned in the CommonJS standard:\n\n* `xSync`: requests that data be written to disk immediately.\n* `xNarwhalNoControlTty`: requests that, if the opened file is\n  a terminal device or pseudo terminal, that the calling\n  process does not become the controller for that terminal.\n* `xNarwhalNoFollow`: ensures that symbolic links are not followed,\n  which prevents certain kinds of attacks that take\n  advantage of race conditions in opening files where the\n  attacker subverts a write by injecting a symbolic link\n  at a path that is known to be opened by a process with\n  authority in excess of its own.\n* `xNarwhalDirectory`",
    "heritage": [
        "packages",
        "narwhal-node",
        "fs-base"
    ],
    "href": "packages---narwhal-node---fs-base---open-raw"
}